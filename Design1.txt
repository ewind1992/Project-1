
CIS 520 - Programming Project #1
                   
---- GROUP ----

Jim Groening <groening@k-state.edu>
Jarrod Krebs <krebs@k-state.edu>
Kevin Schwarz <kschwar8@k-state.edu>

---- PRELIMINARIES ----

Comments:

Sources: www.github.com
	 http://gitref.org/

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

static struct list wait_list; // A list to keep track threads waiting on the semaphore

struct list_elem timer_list_elem; //List element of wait list

struct semaphore s;   //Semaphore used in locking threads

int64_t wakeup_time;  //64 bit integer representing the wakeup time for the thread

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to your timer_sleep(),
>> including the effects of the timer interrupt handler.

	Our timer_sleep function first sets the wake up time of the current thread, then disables 		interrupts in order to insert into the wait list. After inserting, interrupts are enabled.  		Finally, the thread is blocked with a sema_down on the current thread's semaphore 's'.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
	To minimize time in the interrupt handler, interrupts are disabled during critical sections of 		code where a process must complete atomically.

	We also have the wait list ordered by wake-up time, which enables us to only have to loop 		through the number of threads in the waitlist that need to be woken up during the timer       		interrupt. This is done by checking if the timer ticks are less than the wake-up time.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?


>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

	Race conditions are avoided by disabling interrupts before the critical section and then 	 	enabling interrupts after the critical section is done.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> other designs that you considered?
	We chose the design of the ordered wait list so that the interrupt service routine would not 		have to check every thread in the wait list in order to wake up the correct threads.  We also 		chose to use a semaphore to block each thread because of the simplicity of being able to signal 	a semaphore to wake up.

	Our design is superior to other designs because of the efficiency of the ordered wait list.


             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct list donor_list;  //List of threads that have donated their priority to "this" thread
    
struct list_elem donor_list_elem; //elem of donor list
    
struct thread *donee;    //thread that is getting the priority donated from "this" thread

*****Thread Holder???*****

>> B2: Explain the data structure used to track priority donation.


---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?


              ADVANCED SCHEDULER [EXTRA CREDIT]
              =================================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

